<?xml version="1.0" encoding="utf-8"?>
<!--
/*
	Weave (Web-based Analysis and Visualization Environment)
	Copyright (C) 2008-2011 University of Massachusetts Lowell
	
	This file is a part of Weave.
	
	Weave is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License, Version 3,
	as published by the Free Software Foundation.
	
	Weave is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
@author skolman
@author kmonico
@author sanbalag
-->
<ui:DraggablePanel xmlns="weave.visualization.tools.*"
				   xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:ui="weave.ui.*" 
				   xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
				   layout="absolute" implements="weave.api.ui.IVisToolWithSelectableAttributes"
				   title="{lang('Data Table')}" xmlns:editors="weave.editors.*"
				   >
	<mx:VBox width="100%" height="100%" id="tableArea" verticalGap="0" horizontalScrollPolicy="off">
		<mx:HBox minWidth="0" horizontalGap="0" borderStyle="solid"  id="filterControls" width="100%"  verticalAlign="middle" horizontalScrollPolicy="off">
			<mx:Spacer width="{dataGrid.width}"/>
		</mx:HBox>
		<CustomDataGrid:CustomDataGridWithFilters
			id="dataGrid"
			updateComplete="dataGrid_updateCompleteHandler(event)"
			horizontalScrollPolicy="auto"
			verticalScrollPolicy="auto"
			dataProvider="{dataRowKeys}" 
			width="100%" height="100%"
			allowMultipleSelection="true"
			minWidth="0"
			change="handleItemSelection(event)"
			doubleClick="handleItemSelection(event)" doubleClickEnabled="true" 
			headerShift="handleColumnReorder(event)"
			headerRelease="handleHeaderRelease(event)"
			paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"									   
			fontWeight="normal"
			alternatingItemColors="{[0xffffff, 0xEEF6FF]}"
			rollOverColor="0xDADAFF"
			selectionColor="0xFFAAAA"
			mouseDown="handleMouseDown()"
			click="handleMouseClick()"
			/>
		<mx:HBox id="tooManyRecordsIndicator" visible="false" includeInLayout="false" width="100%" horizontalGap="0">
			<mx:Spacer width="100%"/>
			<mx:Label id="maxRowsLabel"/>
			<ui:HelpComponent>
				The table is currently hiding some of the records,
				as the amount has exceeded the tables capability for dealing with it efficiently.
			</ui:HelpComponent>
		</mx:HBox>
		<mx:HBox id="extraControls" width="100%">
			<ui:Indent label="Key type:" translate="true" visible="false" includeInLayout="false">
				<ui:CustomComboBox id="keyTypeCombo"
								   change="filterColumnsByKeyType.value = keyTypeCombo.selectedItem as String;"
								   toolTip="{lang('Only columns of the selected key type will be shown.')}"/>
			</ui:Indent>
			<mx:Button id="button_moveSelectedToTop" visible="{toggle_moveSelectedToTop.selected}" includeInLayout="{toggle_moveSelectedToTop.selected}"
					   label="{lang('Move selected to top')}" click="moveSelectedToTop()"/>
			<mx:Button id="button_clearSelection" visible="{toggle_clearSelection.selected}" includeInLayout="{toggle_clearSelection.selected}"
					   label="{lang('Clear selection')}" click="_selection.clearKeys()"/>
			<mx:Button id="button_editColumns" visible="{toggle_editColumns.selected}" includeInLayout="{toggle_editColumns.selected}"
					   label="{lang('Edit columns')}" click="AttributeSelectorPanel.open(columns)"/>
			<mx:Button id="button_exportData" visible="{toggle_exportData.selected}" includeInLayout="{toggle_exportData.selected}"
					   label="{lang('Export data')}">
				<mx:click>
					try
					{
						new FileReference().save(
							ColumnUtils.generateTableCSV(
								getSelectableAttributes()
							),
							"Weave-data-export.csv"
						);
					}
					catch (e:Error)
					{
						reportError(e);
					}
				</mx:click>
			</mx:Button>
		</mx:HBox>
	</mx:VBox>
	
	<mx:Number id="columnWidthScale">1</mx:Number>
	
	<mx:Script>
		<![CDATA[
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.UIComponent;
			import mx.core.mx_internal;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.managers.IFocusManagerComponent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableObject;
			import weave.api.data.DataTypes;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableFunction;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.ColorColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ImageColumn;
			import weave.data.AttributeColumns.KeyColumn;
			import weave.data.KeySets.KeyFilter;
			import weave.data.KeySets.KeySet;
			import weave.primitives.ColorRamp;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.CustomDataGrid.CustomDataGridColumn;
			import weave.ui.CustomDataGrid.IFilterComponent;
			import weave.ui.CustomDataGrid.SearchFilterComponent;
			import weave.ui.CustomDataGrid.SliderFilterComponent;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.NumberUtils;
			import weave.utils.ProbeTextUtils;
			use namespace mx_internal;
			
			WeaveAPI.registerImplementation(IVisTool, DataTableTool, "Data Table");
			
			public const colorRamp:ColorRamp = newLinkableChild(this, ColorRamp);
			public const columns:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			public const columnWidths:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(LinkableString));
			public const filterComponents:LinkableHashMap = registerLinkableChild(this,new LinkableHashMap(IFilterComponent));
			public const enableProbing:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));

			private const dataGridColumns:Dictionary = new Dictionary();
			private var _currentDataGridColumns:Array = [];
			
			public const dataGridHorizontalScrollPosition:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0));
			public const dataGridVerticalScrollPosition:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0));
			
			private var _textFormat:LinkableTextFormat = Weave.properties.visTextFormat;
			private var _subset:KeyFilter = Weave.defaultSubsetKeyFilter;
			private var _selection:KeySet = Weave.defaultSelectionKeySet;
			private var _probe:KeySet = Weave.defaultProbeKeySet;
			private var _lastHighlighted:IQualifiedKey;

			public const sortFieldIndex:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0));
			public const sortInDescendingOrder:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			
			private const dataRowKeys:ArrayCollection = new ArrayCollection([]);
			
			public const maxRows:LinkableNumber = registerLinkableChild(this, new LinkableNumber(5000));
			
			override protected function constructor():void
			{
				super.constructor();
				
				var probeHeaderColumns:Array = ProbeTextUtils.probeHeaderColumns.getObjects(IAttributeColumn);
				var probedColumns:Array = ProbeTextUtils.probedColumns.getObjects(IAttributeColumn);
				var allColumns:Array = (probeHeaderColumns.concat as Function).apply(null, probedColumns);
				for (var i:int = 0; i < allColumns.length; i++)
				{
					var dynamicColumn:DynamicColumn = columns.requestObject(null, DynamicColumn, false);
					var probedColumn:ILinkableObject = allColumns[i] as ILinkableObject;
					if (probedColumn is DynamicColumn)
						copySessionState(probedColumn, dynamicColumn);
					else
						dynamicColumn.requestLocalObjectCopy(probedColumn);
				}
				getCallbackCollection(this).addImmediateCallback(this, invalidateDisplayList);
				getCallbackCollection(_subset).addImmediateCallback(this,invalidateDisplayList);
				_selection.addImmediateCallback(this,invalidateDisplayList);
				_probe.addImmediateCallback(this,updateGlobalProbeChangeLater);
				Weave.defaultColorColumn.addImmediateCallback(this,invalidateDisplayList);
				getCallbackCollection(_textFormat).addImmediateCallback(this,invalidateDisplayList);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkBindableProperty(showFilters, showFiltersCheckBox, "selected");
				linkBindableProperty(showColors, showColorsCheckBox,"selected");
				linkBindableProperty(enableProbing, enableProbingCheckBox, "selected");

				linkBindableProperty(dataGridHorizontalScrollPosition, dataGrid, 'horizontalScrollPosition', 0, true);
				linkBindableProperty(dataGridVerticalScrollPosition, dataGrid, 'verticalScrollPosition', 0, true);
				
				
				dataGrid.addEventListener(ListEvent.ITEM_ROLL_OVER, handleRollOver);
				dataGrid.addEventListener(MouseEvent.ROLL_OUT, handleRollOut);

				dataGrid.addEventListener(DataGridEvent.COLUMN_STRETCH, handleColumnStretch);
				dataGrid.addEventListener(ResizeEvent.RESIZE, handleToolResize);
				
				columns.childListCallbacks.addImmediateCallback(this, handleColumnListChange,true);
				columnWidths.childListCallbacks.addImmediateCallback(this, assertColumnOrder,true);
				filterComponents.childListCallbacks.addImmediateCallback(this, assertColumnOrder,true);
				
				dimensionsList.hashMap = columns;
				
				UIUtils.linkDisplayObjects(filterControls,filterComponents);
			}

			private function assertColumnOrder():void
			{
				var columnOrder:Array = columns.getNames();
				filterComponents.setNameOrder(columnOrder);
				columnWidths.setNameOrder(columnOrder);
			}
			
			/**
			 * This function(event ListeSner) gets called during dataGrid Resize event
			 * handleDataGridHorizontalScroll calls updateColumnWidths, when the dataGridHorizontalScrollPosition.value is Maximum
			 * handleDataGridHorizontalScroll is called to update FilterComponents Position
			 */			
			private function handleToolResize(event:Event):void
			{
				updateColumnWidths();
				if (dataGridHorizontalScrollPosition.value > 0 && showFilters.value)
				{
					handleDataGridHorizontalScroll();
				}
				
				// Set max header height to 50
				dataGrid.headerHeight = NaN;
				dataGrid._explicitHeaderHeight = false;
				if (dataGrid.calculateHeaderHeight() > 50)
				{
					dataGrid.headerHeight = 50;
				}

			}
			
			private function handleRollOver(event:ListEvent):void // Probe
			{
				if (enableProbing.value == false)
					return;

				var index:int = event.rowIndex;
				var obj:Object = (dataGrid.dataProvider as ArrayCollection).getItemAt( index );
				var key:IQualifiedKey = obj as IQualifiedKey;

				_probe.replaceKeys([key]);
			}
			private function handleRollOut(event:MouseEvent):void // Unprobe
			{
				if (enableProbing.value == false)
					return;
				
				_probe.clearKeys();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				if (!parent) 
					return;
				
				var columnsChanged:Boolean = detectLinkableObjectChange(updateDisplayList, columns);
				if (columnsChanged)
				{
					updateKeyTypeComboBox();
					updateDataGridColumns();
					super.updateDisplayList(unscaledWidth, unscaledHeight); // avoids crashing below
				}
				if (detectLinkableObjectChange(updateDisplayList, lockedColumns) || columnsChanged)
				{
					handleLockedColumnChange();
				}
				if (detectLinkableObjectChange(updateDisplayList, filterColumnsByKeyType, maxRows) || columnsChanged)
				{
					updateKeysColumnsDataProviderAndSelection();
				}
				if (columnsChanged)
				{
					updateBorders();
				}
				if (detectLinkableObjectChange(updateDisplayList, columnWidths))
				{
					updateColumnWidths();
				}
				if (detectLinkableObjectChange(updateDisplayList, showFilters))
				{
					updateFilters();
				}
				if (detectLinkableObjectChange(updateDisplayList, filterComponents) && showFilters.value)
				{
					dataGrid.invalidateFilters();
				}
				if (detectLinkableObjectChange(updateDisplayList, dataGridHorizontalScrollPosition) || columnsChanged)
				{
					handleDataGridHorizontalScroll();
				}
				if (detectLinkableObjectChange(updateDisplayList, dataGridVerticalScrollPosition) || columnsChanged)
				{
					if (dataGrid.verticalScrollPosition != dataGridVerticalScrollPosition.value)
						dataGrid.verticalScrollPosition = dataGridVerticalScrollPosition.value;
				}
				var subsetChanged:Boolean = detectLinkableObjectChange(updateDisplayList, _subset);
				if (subsetChanged)
				{
					// temporary solution
					dataGrid.dataProvider = dataGrid.dataProvider;
				}
				
				if (detectLinkableObjectChange(updateDisplayList, _selection))
				{
					updateGlobalSelectionChange();
					dataGrid.invalidateList();
				}
				
				if (detectLinkableObjectChange(updateDisplayList, _textFormat))
				{
					_textFormat.copyToStyle(dataGrid);
				}
				if (detectLinkableObjectChange(updateDisplayList, sortFieldIndex, sortInDescendingOrder) || columnsChanged || subsetChanged)
				{
					callLater(sortCallback);
				}
				if (detectLinkableObjectChange(updateDisplayList, backgroundColor1, backgroundColor2, colorRamp, Weave.defaultColorColumn, showColors, cellColorFunction))
				{
					dataGrid.setStyle("alternatingItemColors", [backgroundColor1.value, backgroundColor2.value]);
					extraColorTriggers = 2;
				}
				if (extraColorTriggers)
				{
					extraColorTriggers--;
					callLater(updateColors);
				}
				updateGlobalProbeChangeLater();
			}
			
			private var extraColorTriggers:uint = 2;
			private function updateColors():void
			{
				dataGrid.styleChanged('alternatingItemColors');
			}
			
			override public function get defaultPanelTitle():String
			{
				return "Data Table";
			}
			
			
			private function addImageColumn():void
			{
				var imageColumnName:String = dimensionsList.hashMap.generateUniqueName("ImageColumn");
				var imageCol:ImageColumn = dimensionsList.hashMap.requestObject(imageColumnName,ImageColumn, false);
				AttributeSelectorPanel.open(imageCol);
			}
			
			public function getSelectableAttributes():Array
			{
				return [columns];
			}
			
			public function getSelectableAttributeNames():Array
			{
				return [lang("Columns")];
			}
			
			
			/**
			 * This function(event Listener) gets called during 
			 * HeaderRelease event in Datagrid 
			 * or Called (Manually )when column or sortFieldIndex or sortInDescendingOrder changes
			 */				
			private function handleHeaderRelease(event:DataGridEvent):void
			{
				// There is a bug in flex: column.sortDescending will always return false				
				//need to update sessionState when called by User Interaction
				if (UIUtils.hasFocus(dataGrid))
				{
					sortInDescendingOrder.value = !isSortedDescending(); // each time will toggle ascending/descending
					sortFieldIndex.value = event.columnIndex;
				}
				
			}
			
			private function isSortedDescending():Boolean
			{
				return dataGrid.sortDirection != 'ASC';
			}
			
			/**
			 * called from callLater of handleHeaderRelease listener ,to get the correct sorting order. 
			 * There is a bug in flex because of which the c.sortDescending will always return false
			 */
			private function getOrder(column:DataGridColumn,index:int):void
			{
			}
			
			/**
			 * This function gets called in Updatedisplaylist, 
			 * when there is change in sortFieldIndex or sortInDescending 	
			 * called with parameter if called from change in column 
			 */							
			private function sortCallback():void
			{
				if (!parent)
				{
					callLater(sortCallback)
					return;
				}
				
				if (isNaN(sortFieldIndex.value))
					return;
				
				var c:DataGridColumn = dataGrid.columns[sortFieldIndex.value];
				if (c == null)
					return;
				
				// sort by the column specified in the session state , flip the sorting order if it is wrong
				// each time we dispatch a header event, the sort order gets flipped, so we may have to flip it again
				var changeDir:Boolean = isSortedDescending() != sortInDescendingOrder.value;
				var changeIndex:Boolean = dataGrid.sortIndex != sortFieldIndex.value;
				var times:int = 0;
				if (changeDir)
					times = 1; // change direction only requires one event
				else if (changeIndex)
					times = 2; // (change index and keep direction) requires two events

				var prevFocus:IFocusManagerComponent = focusManager.getFocus();
				for (var i:int = 0 ; i < times; i++)
					dataGrid.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, sortFieldIndex.value, null, 0, null, null, 0));
				if (prevFocus)
					focusManager.setFocus(prevFocus);
			}
			
			/**
			 * This function(event Listener) gets called during 
			 * Change event in DataGrid
			 * DoubleClick event in DataGrid
			 */	
			private function handleItemSelection(event:Event=null):void
			{
				dataGrid.validateNow();
				var selectedKeys:Array = new Array();
				for (var i:int = 0; i < dataGrid.selectedIndices.length; i++)
				{
					selectedKeys[i] = (dataGrid.dataProvider as ArrayCollection).getItemAt( dataGrid.selectedIndices[i] ) as IQualifiedKey;
				}
				_selection.replaceKeys(selectedKeys);
			}
			
//			private function clearSelection():void
//			{
//				_selection.clearKeys();
//			}
			/* TODO: Move this method into an abstract class to extend CustomDataGrid off of;
			   this functionality is duplicated used in TreeTool */ 
			private function updateGlobalSelectionChange():void
			{
				if (!parent)
					return callLater(updateGlobalSelectionChange);
				//flex will crash if we try to select items immediately
				if (dataGrid.visibleLockedColumns && lockedColumns.value == 0 && dataGrid.visibleLockedColumns.length != 0)
					validateNow();
				
				var item:Object;
				var isSelected:Dictionary = new Dictionary(true);
				for each (item in dataGrid.selectedItems)
					isSelected[item] = true;
				
				var changeDetected:Boolean = false;
				var selectedItems:Array = [];
				for each (item in dataGrid.dataProvider)
				{
					if (_selection.containsKey(item as IQualifiedKey))
					{
						if (!isSelected[item])
							changeDetected = true;
						selectedItems.push(item);
					}
					else if (isSelected[item])
						changeDetected = true;
				}
				if (selectedItems.length != dataGrid.selectedItems.length)
					changeDetected = true;
				
				if (changeDetected)
					dataGrid.selectedItems = selectedItems;
			}
			private function updateGlobalProbeChangeLater():void
			{
				if (enableProbing.value == true)
					callLater(updateGlobalProbeChange);
			}
			/* TODO: Move this method into an abstract class to extend CustomDataGrid off of;
			   this functionality is duplicated used in TreeTool */ 
			private function updateGlobalProbeChange():void 
			{
				if (!parent)
				{
					callLater(updateGlobalProbeChange);
					return;
				}
				dataGrid.drawItemForced(_lastHighlighted, _selection.containsKey(_lastHighlighted), false);
				if (_probe.keys.length > 0)
				{
					var key:IQualifiedKey = _probe.keys[0];
					var keySelected:Boolean = _selection.containsKey(key);
					dataGrid.drawItemForced(key, keySelected, true);
					_lastHighlighted = key;
				}
				else
				{
					_lastHighlighted = null;
				}
				return;
			}
			
			/**
			 * @TODO This should be a mode, not a one-time action.
			 *       Use AdvancedDataGrid and lockedRowCount.
			 *       The locked rows should also be sorted by the active sort column.
			 *       We shouldn't be resetting the sort.
			 */
			private function moveSelectedToTop():void
			{
				//push selected Objects into an Array
				var selectedItems:Array = dataGrid.selectedItems;
				
				//datagrid.selectedItems returns null. So have to loop through indices to get the items
				(dataGrid.dataProvider as ArrayCollection).sort = null;
				
				for each(var item:Object in selectedItems)
				{
					var index:int = dataRowKeys.getItemIndex(item);
					dataRowKeys.removeItemAt(index);
					dataRowKeys.source.unshift(item);
				}
				
				dataRowKeys.refresh();
				dataGrid.validateNow();
				updateGlobalSelectionChange();
				dataGrid.scrollToIndex(0);
			}
			
			private static const COMBO_ITEM_ALL_KEY_TYPES:String = lang("All key types");
			
			private function updateKeysColumnsDataProviderAndSelection():void
			{
				var includedColumns:Array = [];
				for each (var col:CustomDataGridColumn in dataGrid.columns)
				{
					if (keyTypeCombo.selectedItem == COMBO_ITEM_ALL_KEY_TYPES ||
						(col.attrColumn is KeyColumn) ||
						(ColumnUtils.getKeyType(col.attrColumn) == filterColumnsByKeyType.value))
					{
						col.visible = true;
						includedColumns.push(col.attrColumn);
					}
					else
					{
						col.visible = false;
					}
				}
				var tempArray:Array = ColumnUtils.getAllKeys(includedColumns);
				if ( tempArray.length > maxRows.value)
				{
					maxRowsLabel.text = lang('Showing first {0} out of {1} records', StandardLib.formatNumber(maxRows.value), StandardLib.formatNumber(tempArray.length));
					tooManyRecordsIndicator.visible = true;
					tooManyRecordsIndicator.includeInLayout = true;
					tempArray.length = maxRows.value;
				}
				else
				{
					tooManyRecordsIndicator.visible = false;
					tooManyRecordsIndicator.includeInLayout = false;
				}
					
				dataRowKeys.source = tempArray;
				updateGlobalSelectionChange();
			}
			
			public const filterColumnsByKeyType:LinkableString = newLinkableChild(this,LinkableString,updateKeyTypeComboBox,true);
			private function updateKeyTypeComboBox():void
			{
				if (keyTypeCombo == null)
					return callLater(updateKeyTypeComboBox);
				
				var prevIndex:int = keyTypeCombo.selectedIndex;
				var keyTypeList:Array = new Array();
				keyTypeList.push(COMBO_ITEM_ALL_KEY_TYPES);
				for each (var attrCol:IAttributeColumn in columns.getObjects())
				{
					if (attrCol is KeyColumn)
						continue;
					
					var keyType:String = ColumnUtils.getKeyType(attrCol) || DataTypes.STRING;
					if (keyTypeList.indexOf(keyType) == -1)
						keyTypeList.push(keyType);
				}
				keyTypeCombo.dataProvider = keyTypeList;
				keyTypeCombo.selectedItem = filterColumnsByKeyType.value || COMBO_ITEM_ALL_KEY_TYPES;
			}
			
			private var _minSuggestedColumnSize:int = 32;
			
			private function updateDataGridColumns():void
			{
				// if there isn't a parent or the grid isn't fully instantiated, return
				if (!parent)
					return callLater(updateDataGridColumns);
				try
				{
					var attrColumns:Array = columns.getObjects();
					_currentDataGridColumns = [];
					for each (var attrColumn:IAttributeColumn in attrColumns)
					{
						var columnName:String = columns.getName(attrColumn);
						var dataType:String = ColumnUtils.getDataType(attrColumn);
						
						//column Section
						var dgc:CustomDataGridColumn;
						if (dataGridColumns[columnName])
						{
							dgc = dataGridColumns[columnName];
						}
						else
						{
							dgc = new CustomDataGridColumn(attrColumn, showColors, _cellColorFunction);
							dataGridColumns[columnName] = dgc;
						}
						
						_currentDataGridColumns.push(dgc);
						
						//filterComponent Section
						var classDef:Class = null;
						if (dataType == DataTypes.NUMBER)
							classDef = SliderFilterComponent;
						else
							classDef = SearchFilterComponent;
						dgc.filterComponent = filterComponents.requestObject(columnName, classDef, false);
						
						//columnWidth section
						columnWidths.requestObject(columnName, LinkableString, false);
						
					}  
					dataGrid.columns = _currentDataGridColumns;
					numLockedColumns.maximum = Math.max(0, attrColumns.length - 2);
					numLockedColumns.enabled = numLockedColumns.maximum > 0;
				}
				catch (error:Error)
				{
					reportError(error);
				}
			}
			
			private function handleColumnReorder(event:IndexChangedEvent):void
			{
				var newColumnOrder:Array = [];
				for(var i:int = 0; i< dataGrid.columns.length; i++)
				{
					var currDGcolumn:CustomDataGridColumn = dataGrid.columns[i] as CustomDataGridColumn;
					var columnName:String = columns.getName(currDGcolumn.attrColumn as ILinkableObject);
					newColumnOrder.push(columnName);
				}
				columns.setNameOrder(newColumnOrder);
			}
			
			private function handleColumnListChange():void
			{
				showKeyColumnCheckBox.selected = columns.getNames(KeyColumn).length > 0;
				
				//if column is added , we need to add respective sessioned FilterComponent and ColumnWidth
				if (columns.childListCallbacks.lastObjectAdded)
				{
				}  			
				//if column is removed , we need to remove respective sessioned FilterComponent and ColumnWidth
				else if (columns.childListCallbacks.lastObjectRemoved)
				{
					filterComponents.removeObject(columns.childListCallbacks.lastNameRemoved);
					delete dataGridColumns[columns.childListCallbacks.lastNameRemoved]
					columnWidths.removeObject(columns.childListCallbacks.lastNameRemoved);
				}
				assertColumnOrder();
			}
			
			private function handleColumnStretch(event:Event):void
			{
				var dataGridColumnsWidth:Number = dataGrid.getColumnDisplayWidth();
				for (var i:int = 0; i < _currentDataGridColumns.length; ++i)
				{
					var dgc:CustomDataGridColumn = _currentDataGridColumns[i];
					if (dgc.filterComponent)
						dgc.filterComponent.width = dgc.width;
					
					var colWidth:Number = dgc.width;
					
					var column:IAttributeColumn = dgc.attrColumn;
					var columnName:String = columns.getName(column);
					var sessionedWidth:LinkableString = columnWidths.requestObject(columnName, LinkableString, false);
					
					if (isNaN(colWidth) || width <= _minSuggestedColumnSize) // this happens when a column is stretched all the way to the right
						colWidth = _minSuggestedColumnSize;
					
					sessionedWidth.value = (100 * colWidth / dataGridColumnsWidth) + "%";
				}
			}
			
			private  function updateColumnWidths():void
			{
				// if there isn't a parent or the grid isn't fully instantiated, return
				if (!parent || dataGrid.width == 0  )
				{
					callLater(updateColumnWidths);
					return;
				}
				var allottedDisplayWidth:Number = dataGrid.getColumnDisplayWidth();
				var columnName:String;
				var sessionedWidth:LinkableString;
				var defaultValue:Number = allottedDisplayWidth/_currentDataGridColumns.length;
				var displayedColumnsTotalWidth:Number = 0;
				for (var j:int = 0  ; j < _currentDataGridColumns.length; j++)
				{
					var dgc:CustomDataGridColumn = _currentDataGridColumns[j] as CustomDataGridColumn;
					columnName = columns.getName(dgc.attrColumn);
					if (columnName == null)
						continue;
					sessionedWidth = columnWidths.getObject(columnName) as LinkableString;
					var tempWidth:Number;
					// when we reset width, we need all columns to have default value
					 if (sessionedWidth && sessionedWidth.value)
					 {
						 var sessionedValue:Number = NumberUtils.getNumberFromNumberOrPercent(sessionedWidth.value, allottedDisplayWidth);
						 tempWidth = sessionedValue;
					 }
					 else
					 {
						 tempWidth = defaultValue;
						 //sessionedWidth.value = (100 * tempWidth/allottedDisplayWidth) + "%";
					 } 
					
					//last column gets width to adjust in datgrid, so its necessay to get that width.					
					if (j == _currentDataGridColumns.length -1) 
						tempWidth = allottedDisplayWidth - displayedColumnsTotalWidth;
					if (tempWidth <= _minSuggestedColumnSize || isNaN(tempWidth))
						tempWidth = _minSuggestedColumnSize;
					if (tempWidth >= allottedDisplayWidth - _minSuggestedColumnSize)
						tempWidth = allottedDisplayWidth - _minSuggestedColumnSize;
					//int casting required as rendering works fast with whole number than with an floating number
					var newWidth:Number = int(Math.min(tempWidth, allottedDisplayWidth));
					
					dgc.setWidth(newWidth);
					dgc.width = newWidth;
					
					if (dgc.filterComponent)
					{
						dgc.filterComponent.width = dgc.width;
					}
					//add those columns which are displayed on datagrid
					if (j >= dataGridHorizontalScrollPosition.value)
					{
						displayedColumnsTotalWidth = displayedColumnsTotalWidth + dgc.width;
					}
				}
				displayedColumnsTotalWidth = 0;
			}
			
			private function handleDataGridHorizontalScroll():void
			{
				var maximumValue:int = dataGrid.maxHorizontalScrollPosition;
				var hsp:int = 0;
				for (var i:int = 0; i < dataGridHorizontalScrollPosition.value && i < _currentDataGridColumns.length; i++)
				{
					hsp += (_currentDataGridColumns[i] as CustomDataGridColumn).width;
				}
				filterControls.horizontalScrollPosition = hsp;
				dataGrid.horizontalScrollPosition = dataGridHorizontalScrollPosition.value;
				
				if (maximumValue > 0 && dataGridHorizontalScrollPosition.value == maximumValue)
				{
					updateColumnWidths();
				}
			}
			
			
			private function handleKeyColumnCheckBox():void
			{
				if (showKeyColumnCheckBox.selected)
				{
					var kc:Array= columns.getObjects(KeyColumn);
					if (kc.length == 0)
					{
						var nameOrder:Array = columns.getNames();
						columns.requestObject("KeyColumn",KeyColumn, false);
						columns.setNameOrder(nameOrder);
					}
					updateKeyTypeComboBox();
				}
				else
				{
					var keyCols:Array = columns.getNames(KeyColumn);
					for each(var keyCol:String in keyCols)
					{
						columns.removeObject(keyCol);
					}
				}
				
			}
			
			public const showControls:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateControls);
			public const show_moveSelectedToTop:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			public const show_clearSelection:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			public const show_editColumns:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			public const show_exportData:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			private function updateControls():void
			{
				if (!parent)
					return callLater(updateControls);
				try
				{
					if (showControls.value)
					{
						if (!extraControls.parent)
							tableArea.addChild(extraControls);
					}
					else
					{
						if (extraControls.parent)
							tableArea.removeChild(extraControls);
					}
				}
				catch (e:Error) 
				{
					reportError(e);
				}
			}
			
			public const showFilters:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			private function updateFilters():void
			{
				if (!parent)
					return callLater(updateFilters);
				try
				{
					if (showFilters.value)
					{
						lockedColumns.value = 0;
						if (!filterControls.parent)
						{
							// if there are controls above where the filters should be.. add the filters at index 1, otherwise use index 0
							tableArea.addChildAt(filterControls, 0);
						}
						dataGrid.enableFilters = true;
					}
					else
					{
						if (filterControls.parent)
						{
							tableArea.removeChild(filterControls);
						}
						dataGrid.enableFilters = false;
					}
				}
				catch (e:Error) 
				{
					reportError(e);
				}
			}
			
			public const showColors:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			private const DEFAULT_CELL_COLOR_FUNCTION_SCRIPT:String = StandardLib.unIndent("\
				function (column, key, cell) {\n\
					import 'weave.api.WeaveAPI';\n\
					var name = 'defaultColorColumn';\n\
					var cc = WeaveAPI.globalHashMap.getObject(name);\n\
					return cc.getValueFromKey(key, Number);\n\
				}\n\
			");
			private const HEATMAP_CELL_COLOR_FUNCTION_SCRIPT:String = StandardLib.unIndent("\
				function (column, key, cell) {\n\
					import 'weave.utils.ColumnUtils';\n\
					var norm = ColumnUtils.getNorm(column, key);\n\
					return colorRamp.getColorFromNorm(norm);\n\
				}\n\
			");
			private var _lastCellColorError:Error = null;
			/**
			 * This defines how cells will be colored.
			 * Two parameters are made available to this function: column:IAttributeColumn, key:IQualifiedKey, cell:UIComponent
			 * The return value should be a color, or NaN for no color.
			 */
			public const cellColorFunction:LinkableFunction = registerLinkableChild(this, new LinkableFunction(DEFAULT_CELL_COLOR_FUNCTION_SCRIPT, false, true, ['column', 'key', 'cell']), validateCellColorFunction);
			private function validateCellColorFunction():void
			{
				try
				{
					_lastCellColorError = null;
					cellColorFunction.validate();
					cellColorFunctionEditor.errorString = '';
				}
				catch (e:Error)
				{
					cellColorFunctionEditor.errorString = e.message;
				}
			}
			// this gets passed to cell item renderers
			private function _cellColorFunction(column:IAttributeColumn, key:IQualifiedKey, cell:UIComponent):Number
			{
				try
				{
					return cellColorFunction.apply(this, arguments);
				}
				catch (e:Error)
				{
					if (!_lastCellColorError)
						reportError(_lastCellColorError = e);
				}
				return NaN;
			}
			// default cell color function just gets color from global color column
			[Deprecated] public function defaultCellColorFunction(column:IAttributeColumn, key:IQualifiedKey, cell:UIComponent = null):Number
			{
				var cc:ColorColumn = WeaveAPI.globalHashMap.getObject('defaultColorColumn') as ColorColumn;
				return cc.getValueFromKey(key, Number);
			}
			
			
			public const lockedColumns:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0, verifyLockedColumnCount));
			
			private function verifyLockedColumnCount(value:Number):Boolean
			{
				return value == uint(value);
			}
			
			private function handleLockedColumnChange():void
			{
				var numColumns:int = dataGrid.columns.length;
				if (lockedColumns.value > 0)
					showFilters.value = false;
				if (lockedColumns.value >= numColumns)
					dataGrid.lockedColumnCount = 0;
				else
					dataGrid.lockedColumnCount = lockedColumns.value;
			}
			
			protected function dataGrid_updateCompleteHandler(event:FlexEvent):void
			{
				filterControls.setStyle("paddingLeft", dataGrid.viewMetrics.left);
				filterControls.setStyle("paddingRight", dataGrid.viewMetrics.right);
			}
			
			private var _previousSelection:Object ;
			
			private function handleMouseDown():void
			{
				detectLinkableObjectChange( handleMouseClick, _selection )
			}
			
			private function handleMouseClick():void
			{
				if (!detectLinkableObjectChange( handleMouseClick, _selection ))
					if ( dataGrid.mouseY > dataGrid.headerHeight )
						if ( dataGrid.mouseX < dataGrid.width - 16 )
							if ( WeaveAPI.StageUtils.pointClicked )
								_selection.clearKeys() ;
			}
			
			private static const DEFAULT_BACKGROUND_COLORS:Array = [0xffffff, 0xEEF6FF];
			public const backgroundColor1:LinkableNumber = registerLinkableChild(this, new LinkableNumber(DEFAULT_BACKGROUND_COLORS[0]));
			public const backgroundColor2:LinkableNumber = registerLinkableChild(this, new LinkableNumber(DEFAULT_BACKGROUND_COLORS[1]));
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox label="{lang('Columns')}">
			<mx:CheckBox id="showKeyColumnCheckBox" label="{lang('Show key column')}" change="handleKeyColumnCheckBox()"/>
			<mx:HBox>
				<mx:Label text="{lang('Number of locked columns')}"/>
				<mx:NumericStepper id="numLockedColumns" minimum="0" 
								   creationComplete="linkBindableProperty(lockedColumns, event.target, 'value', 0, true);"/>
			</mx:HBox>
			<ui:ColumnListComponent id="dimensionsList"  backgroundAlpha="0.7" height="100%" width="100%" label="{lang('Columns')}"/>
			<mx:HBox>
				<mx:Button label="{lang('Add image column')}" click="addImageColumn()"/>
				<ui:HelpComponent>
					Select a column that contains image URLs.
					The images will be displayed in the data table.
				</ui:HelpComponent>
			</mx:HBox>

			<mx:Button label="{lang('Reset column widths')}" click="columnWidths.removeAllObjects()"/>

		</mx:VBox>
		<mx:VBox label="{lang('Advanced')}">
			<mx:CheckBox id="enableProbingCheckBox" label="{lang('Enable mouseover linking')}"/>
			<mx:HBox verticalAlign="middle">
				<mx:CheckBox id="showFiltersCheckBox" label="{lang('Show filter controls on panel')}"/>
				<ui:HelpComponent>
					This allows data to be filtered based on the data values.
					Filtered records are highlighted by selection in the other tools.
					
					If a column contains text data, a search box will be displayed which supports wildcards ('?' = any Character; '*' = any String).
					
					If a column contains numeric data, a slider will be displayed that allows selection of Min and Max values.
				</ui:HelpComponent>
			</mx:HBox>
			<ui:CheckBoxWithNestedOptions label="{lang('Show buttons on panel')}" creationComplete="linkBindableProperty(showControls, event.target, 'selected')">
				<mx:CheckBox id="toggle_moveSelectedToTop" label="{lang('Move selected to top')}" creationComplete="linkBindableProperty(show_moveSelectedToTop, event.target, 'selected')"/>
				<mx:CheckBox id="toggle_clearSelection" label="{lang('Clear selection')}" creationComplete="linkBindableProperty(show_clearSelection, event.target, 'selected')"/>
				<mx:CheckBox id="toggle_editColumns" label="{lang('Edit columns')}" creationComplete="linkBindableProperty(show_editColumns, event.target, 'selected')"/>
				<mx:CheckBox id="toggle_exportData" label="{lang('Export data')}" creationComplete="linkBindableProperty(show_exportData, event.target, 'selected')"/>
			</ui:CheckBoxWithNestedOptions>
			<ui:CheckBoxWithNestedOptions id="showColorsCheckBox" label="{lang('Enable cell coloring')}" width="100%" height="100%">
				<ui:HelpComponent>
					<ui:htmlText>
						<![CDATA[
							The result of this expression will be treated as a color value.  You can also put other ActionScript code in here to draw graphics in each cell. <!--
							-->Available variables are <b>column</b>, <b>key</b>, and <b>cell</b>.
						]]>
					</ui:htmlText>
				</ui:HelpComponent>
				<mx:HBox width="100%" height="100%">
					<mx:VBox>
						<mx:Button label="{lang('Default colors')}" click="cellColorFunction.value = DEFAULT_CELL_COLOR_FUNCTION_SCRIPT;"/>
						<mx:Button label="{lang('Heat map')}" click="cellColorFunction.value = HEATMAP_CELL_COLOR_FUNCTION_SCRIPT;"/>
						<mx:Button label="{lang('Edit heat map colors')}" click="ControlPanel.openEditor(colorRamp)"/>
					</mx:VBox>
					<ui:CodeEditor id="cellColorFunctionEditor" creationComplete="linkBindableProperty(cellColorFunction, event.target, 'text', 500);"/>
				</mx:HBox>
			</ui:CheckBoxWithNestedOptions>
			<ui:Indent label="{lang('Background colors')}">
				<ui:CustomColorPicker creationComplete="linkBindableProperty(backgroundColor1, event.target, 'selectedColor');"/>
				<ui:CustomColorPicker creationComplete="linkBindableProperty(backgroundColor2, event.target, 'selectedColor');"/>
				<mx:Button label="{lang('Reset')}" click="backgroundColor1.value = DEFAULT_BACKGROUND_COLORS[0]; backgroundColor2.value = DEFAULT_BACKGROUND_COLORS[1];"/>
			</ui:Indent>
		</mx:VBox>
		<editors:WindowSettingsEditor target="{this}"/>
	</ui:ControlPanel>
</ui:DraggablePanel>
