<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.IDataSourceEditor" xmlns:ui="weave.ui.*"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{lang((_csvDataSource ? 'Edit' : 'Add') + ' CSV Data Source')}"/>
	<ui:Indent group="{indentGroup}" label="{lang('Source Name *')}">
		<mx:TextInput id="sourceName" focusOut="keyTypeSelector.addKeyTypeToMenu(sourceName.text)" width="100%"/>
	</ui:Indent>
	<ui:Indent group="{indentGroup}" label="{lang('Source URL')}">
		<ui:TextInputWithPrompt change="handleURLTextChange()" id="url" width="100%" prompt="http://www.example.com/example.csv"/>
	</ui:Indent>
	<mx:VBox width="100%" enabled="{url.text?false:true}">
		<mx:Label width="100%" textAlign="center" text="OR" fontWeight="bold"/>
		<ui:Indent group="{indentGroup}" label="{lang('Open local CSV file')}">
			<mx:Button label="{lang('Open file')}" click="append = false; browseForFiles()"/>
			<mx:Button label="{lang('Append file')}" click="append = true; browseForFiles()"/>
			<mx:Label id="uploadMessage" color="0xFF0000" text="{lang('loaded')}" visible="false"/>
		</ui:Indent>
		<mx:Label width="100%" textAlign="center" text="{lang('OR')}" fontWeight="bold"/>
		<ui:Indent group="{indentGroup}" label="{lang('Paste/Edit CSV Data')}">
			<mx:TextArea id="csvTextArea" change="csvParser.parseCSV(csvTextArea.text)" width="100%" height="100"/>
		</ui:Indent>
		<mx:Button label="{lang('View data in Grid')}" id="showGridButton" click="showGrid()" enabled="{!arrayIsEmpty(csvRows)}"/>
	</mx:VBox>
	<ui:Indent group="{indentGroup}" label="{lang('Key Column')}">
		<mx:TextInput id="keyColumnName" width="100%" toolTip="{lang('Enter the name of the column that uniquely identifies each row in the data set')}"/>
	</ui:Indent>
	<ui:Indent label="{lang('Key Type *')}">
		<ui:KeyTypesMenu id="keyTypeSelector"/>
	</ui:Indent>
	<mx:Spacer/>
	<mx:Label text="{lang('* = required')}"/>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.api.getCallbackCollection;
			import weave.api.getSessionState;
			import weave.api.registerDisposableChild;
			import weave.api.reportError;
			import weave.compiler.StandardLib;
			import weave.data.CSVParser;
			import weave.data.DataSources.CSVDataSource;
			import weave.editors.managers.EditDataGridPanel;
			import weave.ui.BusyIndicator;
			import weave.ui.IndentGroup;
			import weave.utils.VectorUtils;
			
			[Bindable] private var indentGroup:IndentGroup = new IndentGroup();
			
			private var busyIndicator:BusyIndicator = new BusyIndicator();
			private const csvParser:CSVParser = registerDisposableChild(this, new CSVParser(true));
			[Bindable] private var csvRows:Array = [];
			//this will hold the header columns as was loaded when the data is initially loaded.
			//This is done so that the data gird shows the columns in the same order it was uploaded.
			private var headerArray:Array = [];
			[Bindable] private var _csvDataSource:CSVDataSource = null;
			
			private var append:Boolean = false;
			private var _fileLoader:FileReference = null;
			
			
			override protected function createChildren():void
			{
				super.createChildren();
				addChild(busyIndicator);
				busyIndicator.visible = false;
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName("CSVDataSource");
				keyTypeSelector.addKeyTypeToMenu(sourceName.text);
				getCallbackCollection(csvParser).addImmediateCallback(this, handleCSVParser);
			}
			
			
			public function setTarget(object:ILinkableObject):void
			{
				_csvDataSource = object as CSVDataSource;
				
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				if (_csvDataSource)
				{
					sourceName.text = WeaveAPI.globalHashMap.getName(_csvDataSource);
					url.text = _csvDataSource.url.value;
					keyColumnName.text = _csvDataSource.keyColName.value;
					keyTypeSelector.addKeyTypeToMenu(_csvDataSource.keyType.value);
					keyTypeSelector.selectedKeyType = _csvDataSource.keyType.value;
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.")
					handleURLTextChange();
					if (!url.text)
					{
						var rows:Array = _csvDataSource.csvData.getSessionState() as Array;
						setCSVRows(rows);
					}
				}
			}
			
			public function hasPendingChanges():Boolean
			{
				return StandardLib.asString(_csvDataSource.url.value) != StandardLib.asString(url.text)
					|| StandardLib.asString(_csvDataSource.keyColName.value) != StandardLib.asString(keyColumnName.text)
					|| StandardLib.asString(_csvDataSource.keyType.value) != StandardLib.asString(keyTypeSelector.selectedKeyType)
					|| !!WeaveAPI.SessionManager.computeDiff(getSessionState(_csvDataSource.csvData), csvRows);
			}

			public function applyChanges():void
			{
				_csvDataSource.url.value = url.text;
				_csvDataSource.keyColName.value = keyColumnName.text;
				_csvDataSource.keyType.value = keyTypeSelector.selectedKeyType;
				_csvDataSource.csvData.setSessionState(csvRows);
			}
			
			public function createDataSource():IDataSource
			{
				if (!sourceName.text || (!url.text && !getCSVRows()) || !keyTypeSelector.selectedKeyType)
				{
					Alert.show(lang("Please fill all required fields"), lang("Error"));
					return null;
				}
				if (WeaveAPI.globalHashMap.getObject(sourceName.text))
				{
					Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
					return null;
				}
				_csvDataSource = WeaveAPI.globalHashMap.requestObject(sourceName.text, CSVDataSource, false);
				if (!_csvDataSource)
				{
					Alert.show(lang("Unexpected problem. Unable to add the data source."));
					return null;
				}
				applyChanges();
				return _csvDataSource;
			}
			
			/**
			* browseForfiles: opens up a file browser window to upload CSV files 
			**/
			private function browseForFiles():void
			{
				try
				{
					if(_fileLoader == null)
					{
						_fileLoader = new FileReference();
						_fileLoader.addEventListener(Event.SELECT, csvFileSelectedHandler);
						_fileLoader.addEventListener(ProgressEvent.PROGRESS, handleProgress);
						_fileLoader.addEventListener(Event.COMPLETE, csvFileLoadCompleteHandler);
						_fileLoader.addEventListener(IOErrorEvent.IO_ERROR, fileErrorHandler);
					}
					
					_fileLoader.browse([new FileFilter("CSV", "*.csv")]);
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			private function csvFileSelectedHandler(event:Event):void
			{
				// Show busy indicator until parser finishes (handleCSVParser)
				busyIndicator.visible = true;
				_fileLoader.load();
				WeaveAPI.ProgressIndicator.addTask(_fileLoader);
			}
			
			private function handleProgress(event:ProgressEvent):void
			{
				WeaveAPI.ProgressIndicator.updateTask(_fileLoader, event.bytesLoaded / event.bytesTotal);
			}
			
			private function csvFileLoadCompleteHandler(event:Event):void
			{
				if (true)
				{
					url.text = WeaveAPI.URLRequestUtils.saveLocalFile(_fileLoader.name, _fileLoader.data);
					handleURLTextChange();
					busyIndicator.visible = false;
				}
				else
				{
					url.text = "";
					handleURLTextChange();
					csvParser.parseCSV(_fileLoader.data.toString());
				}
				uploadMessage.visible = true;
				
				csvTextArea.text = "";
				WeaveAPI.ProgressIndicator.removeTask(_fileLoader);
				
				if (_fileLoader.data == null)
				{
					busyIndicator.visible = false;
					return;
				}
			}
			
			private function fileErrorHandler(event:IOErrorEvent):void
			{
				busyIndicator.visible = false;
				var fileRef:FileReference = event.target as FileReference;
				reportError(
					"File upload failed",
					"File: " + fileRef.name + "\n" + "Size: " + fileRef.size + "\n" + event.text
				);
			}
			
			// called when parser finishes
			private function handleCSVParser():void
			{
				if (append)
				{
					var newRows:Array = csvParser.parseResult;
					setCSVRows(
						WeaveAPI.CSVParser.convertRecordsToRows(
							VectorUtils.flatten(
								WeaveAPI.CSVParser.convertRowsToRecords(newRows),
								WeaveAPI.CSVParser.convertRowsToRecords(csvRows)
							),
							VectorUtils.union(headerArray, newRows[0])
						)
					);
				}
				else
					setCSVRows(csvParser.parseResult);
			}
			private function setCSVRows(rows:Array):void
			{
				csvRows = rows;
				headerArray = rows ? rows[0] : [];
				
				//this is set to false because this function might be called from Text Area change.
				uploadMessage.visible = false;
				
				//clearing the Source URL text input
				url.text = "";
				
				busyIndicator.visible = false;
			}
			
			public function getCSVRows():Array
			{
				return csvRows;
			}
			
			private function arrayIsEmpty(array:Array):Boolean
			{
				return !array || !array.length;
			}
			
			private function showGrid():void
			{
				if (arrayIsEmpty(csvRows))
					return;
				
				var grid:EditDataGridPanel = PopUpManager.createPopUp(this, EditDataGridPanel) as EditDataGridPanel;
				
				//Listen for save changes in Data Grid Editor
				grid.saveButton.addEventListener(MouseEvent.CLICK, handleSaveButtonClick);
				
				grid.setRows(csvRows, true);
				
				PopUpManager.bringToFront(grid);
				
				function handleSaveButtonClick(event:MouseEvent):void
				{
					setCSVRows(grid.getRows());
					
					//if the data entered through the text area, clear the text area
					if (csvTextArea.text != "")
						csvTextArea.text = '';
				}
			}
			
			private function handleURLTextChange():void
			{
				var hasURL:Boolean = url.text ? true : false;
				uploadMessage.visible = !hasURL;
				csvRows = null;
				csvTextArea.text = '';
			}
		]]>
	</mx:Script>
</mx:VBox>